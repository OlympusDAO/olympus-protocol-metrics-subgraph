// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class ClearinghouseActivated extends ethereum.Event {
  get params(): ClearinghouseActivated__Params {
    return new ClearinghouseActivated__Params(this);
  }
}

export class ClearinghouseActivated__Params {
  _event: ClearinghouseActivated;

  constructor(event: ClearinghouseActivated) {
    this._event = event;
  }

  get clearinghouse(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClearinghouseDeactivated extends ethereum.Event {
  get params(): ClearinghouseDeactivated__Params {
    return new ClearinghouseDeactivated__Params(this);
  }
}

export class ClearinghouseDeactivated__Params {
  _event: ClearinghouseDeactivated;

  constructor(event: ClearinghouseDeactivated) {
    this._event = event;
  }

  get clearinghouse(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BophadesClearinghouseRegistry__VERSIONResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getMajor(): i32 {
    return this.value0;
  }

  getMinor(): i32 {
    return this.value1;
  }
}

export class BophadesClearinghouseRegistry extends ethereum.SmartContract {
  static bind(address: Address): BophadesClearinghouseRegistry {
    return new BophadesClearinghouseRegistry(
      "BophadesClearinghouseRegistry",
      address
    );
  }

  KEYCODE(): Bytes {
    const result = super.call("KEYCODE", "KEYCODE():(bytes5)", []);

    return result[0].toBytes();
  }

  try_KEYCODE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall("KEYCODE", "KEYCODE():(bytes5)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERSION(): BophadesClearinghouseRegistry__VERSIONResult {
    const result = super.call("VERSION", "VERSION():(uint8,uint8)", []);

    return new BophadesClearinghouseRegistry__VERSIONResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_VERSION(): ethereum.CallResult<
    BophadesClearinghouseRegistry__VERSIONResult
  > {
    const result = super.tryCall("VERSION", "VERSION():(uint8,uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BophadesClearinghouseRegistry__VERSIONResult(
        value[0].toI32(),
        value[1].toI32()
      )
    );
  }

  active(param0: BigInt): Address {
    const result = super.call("active", "active(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_active(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall("active", "active(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activeCount(): BigInt {
    const result = super.call("activeCount", "activeCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activeCount(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("activeCount", "activeCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  kernel(): Address {
    const result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    const result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(param0: BigInt): Address {
    const result = super.call("registry", "registry(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_registry(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall("registry", "registry(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registryCount(): BigInt {
    const result = super.call("registryCount", "registryCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_registryCount(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "registryCount",
      "registryCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class INITCall extends ethereum.Call {
  get inputs(): INITCall__Inputs {
    return new INITCall__Inputs(this);
  }

  get outputs(): INITCall__Outputs {
    return new INITCall__Outputs(this);
  }
}

export class INITCall__Inputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class INITCall__Outputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class ActivateClearinghouseCall extends ethereum.Call {
  get inputs(): ActivateClearinghouseCall__Inputs {
    return new ActivateClearinghouseCall__Inputs(this);
  }

  get outputs(): ActivateClearinghouseCall__Outputs {
    return new ActivateClearinghouseCall__Outputs(this);
  }
}

export class ActivateClearinghouseCall__Inputs {
  _call: ActivateClearinghouseCall;

  constructor(call: ActivateClearinghouseCall) {
    this._call = call;
  }

  get clearinghouse_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivateClearinghouseCall__Outputs {
  _call: ActivateClearinghouseCall;

  constructor(call: ActivateClearinghouseCall) {
    this._call = call;
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class DeactivateClearinghouseCall extends ethereum.Call {
  get inputs(): DeactivateClearinghouseCall__Inputs {
    return new DeactivateClearinghouseCall__Inputs(this);
  }

  get outputs(): DeactivateClearinghouseCall__Outputs {
    return new DeactivateClearinghouseCall__Outputs(this);
  }
}

export class DeactivateClearinghouseCall__Inputs {
  _call: DeactivateClearinghouseCall;

  constructor(call: DeactivateClearinghouseCall) {
    this._call = call;
  }

  get clearinghouse_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeactivateClearinghouseCall__Outputs {
  _call: DeactivateClearinghouseCall;

  constructor(call: DeactivateClearinghouseCall) {
    this._call = call;
  }
}
