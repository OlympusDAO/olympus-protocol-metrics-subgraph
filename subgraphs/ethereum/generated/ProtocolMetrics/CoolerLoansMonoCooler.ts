// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class AuthorizationSet extends ethereum.Event {
  get params(): AuthorizationSet__Params {
    return new AuthorizationSet__Params(this);
  }
}

export class AuthorizationSet__Params {
  _event: AuthorizationSet;

  constructor(event: AuthorizationSet) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get authorized(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get authorizationDeadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BorrowPausedSet extends ethereum.Event {
  get params(): BorrowPausedSet__Params {
    return new BorrowPausedSet__Params(this);
  }
}

export class BorrowPausedSet__Params {
  _event: BorrowPausedSet;

  constructor(event: BorrowPausedSet) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class CollateralAdded extends ethereum.Event {
  get params(): CollateralAdded__Params {
    return new CollateralAdded__Params(this);
  }
}

export class CollateralAdded__Params {
  _event: CollateralAdded;

  constructor(event: CollateralAdded) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralWithdrawn extends ethereum.Event {
  get params(): CollateralWithdrawn__Params {
    return new CollateralWithdrawn__Params(this);
  }
}

export class CollateralWithdrawn__Params {
  _event: CollateralWithdrawn;

  constructor(event: CollateralWithdrawn) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InterestRateSet extends ethereum.Event {
  get params(): InterestRateSet__Params {
    return new InterestRateSet__Params(this);
  }
}

export class InterestRateSet__Params {
  _event: InterestRateSet;

  constructor(event: InterestRateSet) {
    this._event = event;
  }

  get interestRateWad(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralSeized(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debtWiped(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get incentives(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidationsPausedSet extends ethereum.Event {
  get params(): LiquidationsPausedSet__Params {
    return new LiquidationsPausedSet__Params(this);
  }
}

export class LiquidationsPausedSet__Params {
  _event: LiquidationsPausedSet;

  constructor(event: LiquidationsPausedSet) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LtvOracleSet extends ethereum.Event {
  get params(): LtvOracleSet__Params {
    return new LtvOracleSet__Params(this);
  }
}

export class LtvOracleSet__Params {
  _event: LtvOracleSet;

  constructor(event: LtvOracleSet) {
    this._event = event;
  }

  get oracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasuryBorrowerSet extends ethereum.Event {
  get params(): TreasuryBorrowerSet__Params {
    return new TreasuryBorrowerSet__Params(this);
  }
}

export class TreasuryBorrowerSet__Params {
  _event: TreasuryBorrowerSet;

  constructor(event: TreasuryBorrowerSet) {
    this._event = event;
  }

  get treasuryBorrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CoolerLoansMonoCooler__accountDelegationsListResultDelegationsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get escrow(): Address {
    return this[2].toAddress();
  }
}

export class CoolerLoansMonoCooler__accountPositionResultPositionStruct extends ethereum.Tuple {
  get collateral(): BigInt {
    return this[0].toBigInt();
  }

  get currentDebt(): BigInt {
    return this[1].toBigInt();
  }

  get maxOriginationDebtAmount(): BigInt {
    return this[2].toBigInt();
  }

  get liquidationDebtAmount(): BigInt {
    return this[3].toBigInt();
  }

  get healthFactor(): BigInt {
    return this[4].toBigInt();
  }

  get currentLtv(): BigInt {
    return this[5].toBigInt();
  }

  get totalDelegated(): BigInt {
    return this[6].toBigInt();
  }

  get numDelegateAddresses(): BigInt {
    return this[7].toBigInt();
  }

  get maxDelegateAddresses(): BigInt {
    return this[8].toBigInt();
  }
}

export class CoolerLoansMonoCooler__accountStateResultValue0Struct extends ethereum.Tuple {
  get collateral(): BigInt {
    return this[0].toBigInt();
  }

  get debtCheckpoint(): BigInt {
    return this[1].toBigInt();
  }

  get interestAccumulatorRay(): BigInt {
    return this[2].toBigInt();
  }
}

export class CoolerLoansMonoCooler__applyDelegationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalDelegated(): BigInt {
    return this.value0;
  }

  getTotalUndelegated(): BigInt {
    return this.value1;
  }

  getUndelegatedBalance(): BigInt {
    return this.value2;
  }
}

export class CoolerLoansMonoCooler__applyDelegationsInputDelegationRequestsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CoolerLoansMonoCooler__applyUnhealthyDelegationsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotalUndelegated(): BigInt {
    return this.value0;
  }

  getUndelegatedBalance(): BigInt {
    return this.value1;
  }
}

export class CoolerLoansMonoCooler__batchLiquidateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalCollateralClaimed(): BigInt {
    return this.value0;
  }

  getTotalDebtWiped(): BigInt {
    return this.value1;
  }

  getTotalLiquidationIncentive(): BigInt {
    return this.value2;
  }
}

export class CoolerLoansMonoCooler__checkpointDebtResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class CoolerLoansMonoCooler__computeLiquidityResultStatusStruct extends ethereum.Tuple {
  get collateral(): BigInt {
    return this[0].toBigInt();
  }

  get currentDebt(): BigInt {
    return this[1].toBigInt();
  }

  get currentLtv(): BigInt {
    return this[2].toBigInt();
  }

  get exceededLiquidationLtv(): boolean {
    return this[3].toBoolean();
  }

  get exceededMaxOriginationLtv(): boolean {
    return this[4].toBoolean();
  }

  get currentIncentive(): BigInt {
    return this[5].toBigInt();
  }
}

export class CoolerLoansMonoCooler__globalStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class CoolerLoansMonoCooler__loanToValuesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMaxOriginationLtv(): BigInt {
    return this.value0;
  }

  getLiquidationLtv(): BigInt {
    return this.value1;
  }
}

export class CoolerLoansMonoCooler__requestPermissionsResultRequestsStruct extends ethereum.Tuple {
  get keycode(): Bytes {
    return this[0].toBytes();
  }

  get funcSelector(): Bytes {
    return this[1].toBytes();
  }
}

export class CoolerLoansMonoCooler__withdrawCollateralInputDelegationRequestsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CoolerLoansMonoCooler extends ethereum.SmartContract {
  static bind(address: Address): CoolerLoansMonoCooler {
    return new CoolerLoansMonoCooler("CoolerLoansMonoCooler", address);
  }

  DLGTE(): Address {
    const result = super.call("DLGTE", "DLGTE():(address)", []);

    return result[0].toAddress();
  }

  try_DLGTE(): ethereum.CallResult<Address> {
    const result = super.tryCall("DLGTE", "DLGTE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DOMAIN_SEPARATOR(): Bytes {
    const result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTR(): Address {
    const result = super.call("MINTR", "MINTR():(address)", []);

    return result[0].toAddress();
  }

  try_MINTR(): ethereum.CallResult<Address> {
    const result = super.tryCall("MINTR", "MINTR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ROLES(): Address {
    const result = super.call("ROLES", "ROLES():(address)", []);

    return result[0].toAddress();
  }

  try_ROLES(): ethereum.CallResult<Address> {
    const result = super.tryCall("ROLES", "ROLES():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountCollateral(account: Address): BigInt {
    const result = super.call(
      "accountCollateral",
      "accountCollateral(address):(uint128)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_accountCollateral(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "accountCollateral",
      "accountCollateral(address):(uint128)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountDebt(account: Address): BigInt {
    const result = super.call("accountDebt", "accountDebt(address):(uint128)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_accountDebt(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "accountDebt",
      "accountDebt(address):(uint128)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountDelegationsList(
    account: Address,
    startIndex: BigInt,
    maxItems: BigInt,
  ): Array<CoolerLoansMonoCooler__accountDelegationsListResultDelegationsStruct> {
    const result = super.call(
      "accountDelegationsList",
      "accountDelegationsList(address,uint256,uint256):((address,uint256,address)[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(maxItems),
      ],
    );

    return result[0].toTupleArray<CoolerLoansMonoCooler__accountDelegationsListResultDelegationsStruct>();
  }

  try_accountDelegationsList(
    account: Address,
    startIndex: BigInt,
    maxItems: BigInt,
  ): ethereum.CallResult<
    Array<CoolerLoansMonoCooler__accountDelegationsListResultDelegationsStruct>
  > {
    const result = super.tryCall(
      "accountDelegationsList",
      "accountDelegationsList(address,uint256,uint256):((address,uint256,address)[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(maxItems),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoolerLoansMonoCooler__accountDelegationsListResultDelegationsStruct>(),
    );
  }

  accountPosition(
    account: Address,
  ): CoolerLoansMonoCooler__accountPositionResultPositionStruct {
    const result = super.call(
      "accountPosition",
      "accountPosition(address):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account)],
    );

    return changetype<CoolerLoansMonoCooler__accountPositionResultPositionStruct>(
      result[0].toTuple(),
    );
  }

  try_accountPosition(
    account: Address,
  ): ethereum.CallResult<CoolerLoansMonoCooler__accountPositionResultPositionStruct> {
    const result = super.tryCall(
      "accountPosition",
      "accountPosition(address):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoolerLoansMonoCooler__accountPositionResultPositionStruct>(
        value[0].toTuple(),
      ),
    );
  }

  accountState(
    account: Address,
  ): CoolerLoansMonoCooler__accountStateResultValue0Struct {
    const result = super.call(
      "accountState",
      "accountState(address):((uint128,uint128,uint256))",
      [ethereum.Value.fromAddress(account)],
    );

    return changetype<CoolerLoansMonoCooler__accountStateResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_accountState(
    account: Address,
  ): ethereum.CallResult<CoolerLoansMonoCooler__accountStateResultValue0Struct> {
    const result = super.tryCall(
      "accountState",
      "accountState(address):((uint128,uint128,uint256))",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoolerLoansMonoCooler__accountStateResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  applyDelegations(
    delegationRequests: Array<CoolerLoansMonoCooler__applyDelegationsInputDelegationRequestsStruct>,
    onBehalfOf: Address,
  ): CoolerLoansMonoCooler__applyDelegationsResult {
    const result = super.call(
      "applyDelegations",
      "applyDelegations((address,int256)[],address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromTupleArray(delegationRequests),
        ethereum.Value.fromAddress(onBehalfOf),
      ],
    );

    return new CoolerLoansMonoCooler__applyDelegationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_applyDelegations(
    delegationRequests: Array<CoolerLoansMonoCooler__applyDelegationsInputDelegationRequestsStruct>,
    onBehalfOf: Address,
  ): ethereum.CallResult<CoolerLoansMonoCooler__applyDelegationsResult> {
    const result = super.tryCall(
      "applyDelegations",
      "applyDelegations((address,int256)[],address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromTupleArray(delegationRequests),
        ethereum.Value.fromAddress(onBehalfOf),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CoolerLoansMonoCooler__applyDelegationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  applyUnhealthyDelegations(
    account: Address,
    autoRescindMaxNumDelegates: BigInt,
  ): CoolerLoansMonoCooler__applyUnhealthyDelegationsResult {
    const result = super.call(
      "applyUnhealthyDelegations",
      "applyUnhealthyDelegations(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(autoRescindMaxNumDelegates),
      ],
    );

    return new CoolerLoansMonoCooler__applyUnhealthyDelegationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_applyUnhealthyDelegations(
    account: Address,
    autoRescindMaxNumDelegates: BigInt,
  ): ethereum.CallResult<CoolerLoansMonoCooler__applyUnhealthyDelegationsResult> {
    const result = super.tryCall(
      "applyUnhealthyDelegations",
      "applyUnhealthyDelegations(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(autoRescindMaxNumDelegates),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CoolerLoansMonoCooler__applyUnhealthyDelegationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  authorizationNonces(param0: Address): BigInt {
    const result = super.call(
      "authorizationNonces",
      "authorizationNonces(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_authorizationNonces(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "authorizationNonces",
      "authorizationNonces(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authorizations(param0: Address, param1: Address): BigInt {
    const result = super.call(
      "authorizations",
      "authorizations(address,address):(uint96)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_authorizations(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "authorizations",
      "authorizations(address,address):(uint96)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchLiquidate(
    accounts: Array<Address>,
  ): CoolerLoansMonoCooler__batchLiquidateResult {
    const result = super.call(
      "batchLiquidate",
      "batchLiquidate(address[]):(uint128,uint128,uint128)",
      [ethereum.Value.fromAddressArray(accounts)],
    );

    return new CoolerLoansMonoCooler__batchLiquidateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_batchLiquidate(
    accounts: Array<Address>,
  ): ethereum.CallResult<CoolerLoansMonoCooler__batchLiquidateResult> {
    const result = super.tryCall(
      "batchLiquidate",
      "batchLiquidate(address[]):(uint128,uint128,uint128)",
      [ethereum.Value.fromAddressArray(accounts)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CoolerLoansMonoCooler__batchLiquidateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  borrow(
    borrowAmount: BigInt,
    onBehalfOf: Address,
    recipient: Address,
  ): BigInt {
    const result = super.call(
      "borrow",
      "borrow(uint128,address,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromAddress(recipient),
      ],
    );

    return result[0].toBigInt();
  }

  try_borrow(
    borrowAmount: BigInt,
    onBehalfOf: Address,
    recipient: Address,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "borrow",
      "borrow(uint128,address,address):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromAddress(recipient),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowsPaused(): boolean {
    const result = super.call("borrowsPaused", "borrowsPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_borrowsPaused(): ethereum.CallResult<boolean> {
    const result = super.tryCall("borrowsPaused", "borrowsPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkpointDebt(): CoolerLoansMonoCooler__checkpointDebtResult {
    const result = super.call(
      "checkpointDebt",
      "checkpointDebt():(uint128,uint256)",
      [],
    );

    return new CoolerLoansMonoCooler__checkpointDebtResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_checkpointDebt(): ethereum.CallResult<CoolerLoansMonoCooler__checkpointDebtResult> {
    const result = super.tryCall(
      "checkpointDebt",
      "checkpointDebt():(uint128,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CoolerLoansMonoCooler__checkpointDebtResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  collateralToken(): Address {
    const result = super.call(
      "collateralToken",
      "collateralToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_collateralToken(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "collateralToken",
      "collateralToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeLiquidity(
    accounts: Array<Address>,
  ): Array<CoolerLoansMonoCooler__computeLiquidityResultStatusStruct> {
    const result = super.call(
      "computeLiquidity",
      "computeLiquidity(address[]):((uint128,uint128,uint128,bool,bool,uint128)[])",
      [ethereum.Value.fromAddressArray(accounts)],
    );

    return result[0].toTupleArray<CoolerLoansMonoCooler__computeLiquidityResultStatusStruct>();
  }

  try_computeLiquidity(
    accounts: Array<Address>,
  ): ethereum.CallResult<
    Array<CoolerLoansMonoCooler__computeLiquidityResultStatusStruct>
  > {
    const result = super.tryCall(
      "computeLiquidity",
      "computeLiquidity(address[]):((uint128,uint128,uint128,bool,bool,uint128)[])",
      [ethereum.Value.fromAddressArray(accounts)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoolerLoansMonoCooler__computeLiquidityResultStatusStruct>(),
    );
  }

  configureDependencies(): Array<Bytes> {
    const result = super.call(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      [],
    );

    return result[0].toBytesArray();
  }

  try_configureDependencies(): ethereum.CallResult<Array<Bytes>> {
    const result = super.tryCall(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  debtDeltaForMaxOriginationLtv(
    account: Address,
    collateralDelta: BigInt,
  ): BigInt {
    const result = super.call(
      "debtDeltaForMaxOriginationLtv",
      "debtDeltaForMaxOriginationLtv(address,int128):(int128)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromSignedBigInt(collateralDelta),
      ],
    );

    return result[0].toBigInt();
  }

  try_debtDeltaForMaxOriginationLtv(
    account: Address,
    collateralDelta: BigInt,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "debtDeltaForMaxOriginationLtv",
      "debtDeltaForMaxOriginationLtv(address,int128):(int128)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromSignedBigInt(collateralDelta),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtToken(): Address {
    const result = super.call("debtToken", "debtToken():(address)", []);

    return result[0].toAddress();
  }

  try_debtToken(): ethereum.CallResult<Address> {
    const result = super.tryCall("debtToken", "debtToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  globalState(): CoolerLoansMonoCooler__globalStateResult {
    const result = super.call(
      "globalState",
      "globalState():(uint128,uint256)",
      [],
    );

    return new CoolerLoansMonoCooler__globalStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_globalState(): ethereum.CallResult<CoolerLoansMonoCooler__globalStateResult> {
    const result = super.tryCall(
      "globalState",
      "globalState():(uint128,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CoolerLoansMonoCooler__globalStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  interestAccumulatorRay(): BigInt {
    const result = super.call(
      "interestAccumulatorRay",
      "interestAccumulatorRay():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_interestAccumulatorRay(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "interestAccumulatorRay",
      "interestAccumulatorRay():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestAccumulatorUpdatedAt(): BigInt {
    const result = super.call(
      "interestAccumulatorUpdatedAt",
      "interestAccumulatorUpdatedAt():(uint40)",
      [],
    );

    return result[0].toBigInt();
  }

  try_interestAccumulatorUpdatedAt(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "interestAccumulatorUpdatedAt",
      "interestAccumulatorUpdatedAt():(uint40)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRateWad(): BigInt {
    const result = super.call(
      "interestRateWad",
      "interestRateWad():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_interestRateWad(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "interestRateWad",
      "interestRateWad():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(): boolean {
    const result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    const result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSenderAuthorized(sender: Address, onBehalfOf: Address): boolean {
    const result = super.call(
      "isSenderAuthorized",
      "isSenderAuthorized(address,address):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(onBehalfOf),
      ],
    );

    return result[0].toBoolean();
  }

  try_isSenderAuthorized(
    sender: Address,
    onBehalfOf: Address,
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isSenderAuthorized",
      "isSenderAuthorized(address,address):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(onBehalfOf),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    const result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    const result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationsPaused(): boolean {
    const result = super.call(
      "liquidationsPaused",
      "liquidationsPaused():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_liquidationsPaused(): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "liquidationsPaused",
      "liquidationsPaused():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanToValues(): CoolerLoansMonoCooler__loanToValuesResult {
    const result = super.call(
      "loanToValues",
      "loanToValues():(uint96,uint96)",
      [],
    );

    return new CoolerLoansMonoCooler__loanToValuesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_loanToValues(): ethereum.CallResult<CoolerLoansMonoCooler__loanToValuesResult> {
    const result = super.tryCall(
      "loanToValues",
      "loanToValues():(uint96,uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new CoolerLoansMonoCooler__loanToValuesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  ltvOracle(): Address {
    const result = super.call("ltvOracle", "ltvOracle():(address)", []);

    return result[0].toAddress();
  }

  try_ltvOracle(): ethereum.CallResult<Address> {
    const result = super.tryCall("ltvOracle", "ltvOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minDebtRequired(): BigInt {
    const result = super.call(
      "minDebtRequired",
      "minDebtRequired():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minDebtRequired(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minDebtRequired",
      "minDebtRequired():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ohm(): Address {
    const result = super.call("ohm", "ohm():(address)", []);

    return result[0].toAddress();
  }

  try_ohm(): ethereum.CallResult<Address> {
    const result = super.tryCall("ohm", "ohm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  repay(repayAmount: BigInt, onBehalfOf: Address): BigInt {
    const result = super.call("repay", "repay(uint128,address):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(repayAmount),
      ethereum.Value.fromAddress(onBehalfOf),
    ]);

    return result[0].toBigInt();
  }

  try_repay(
    repayAmount: BigInt,
    onBehalfOf: Address,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall("repay", "repay(uint128,address):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(repayAmount),
      ethereum.Value.fromAddress(onBehalfOf),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestPermissions(): Array<CoolerLoansMonoCooler__requestPermissionsResultRequestsStruct> {
    const result = super.call(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      [],
    );

    return result[0].toTupleArray<CoolerLoansMonoCooler__requestPermissionsResultRequestsStruct>();
  }

  try_requestPermissions(): ethereum.CallResult<
    Array<CoolerLoansMonoCooler__requestPermissionsResultRequestsStruct>
  > {
    const result = super.tryCall(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoolerLoansMonoCooler__requestPermissionsResultRequestsStruct>(),
    );
  }

  staking(): Address {
    const result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    const result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalCollateral(): BigInt {
    const result = super.call(
      "totalCollateral",
      "totalCollateral():(uint128)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalCollateral(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "totalCollateral",
      "totalCollateral():(uint128)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDebt(): BigInt {
    const result = super.call("totalDebt", "totalDebt():(uint128)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalDebt", "totalDebt():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryBorrower(): Address {
    const result = super.call(
      "treasuryBorrower",
      "treasuryBorrower():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_treasuryBorrower(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "treasuryBorrower",
      "treasuryBorrower():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawCollateral(
    collateralAmount: BigInt,
    onBehalfOf: Address,
    recipient: Address,
    delegationRequests: Array<CoolerLoansMonoCooler__withdrawCollateralInputDelegationRequestsStruct>,
  ): BigInt {
    const result = super.call(
      "withdrawCollateral",
      "withdrawCollateral(uint128,address,address,(address,int256)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(collateralAmount),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromTupleArray(delegationRequests),
      ],
    );

    return result[0].toBigInt();
  }

  try_withdrawCollateral(
    collateralAmount: BigInt,
    onBehalfOf: Address,
    recipient: Address,
    delegationRequests: Array<CoolerLoansMonoCooler__withdrawCollateralInputDelegationRequestsStruct>,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "withdrawCollateral",
      "withdrawCollateral(uint128,address,address,(address,int256)[]):(uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(collateralAmount),
        ethereum.Value.fromAddress(onBehalfOf),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromTupleArray(delegationRequests),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ohm_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gohm_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get staking_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get kernel_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get ltvOracle_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get interestRateWad_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get minDebtRequired_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get delegationRequests(): Array<AddCollateralCallDelegationRequestsStruct> {
    return this._call.inputValues[2].value.toTupleArray<AddCollateralCallDelegationRequestsStruct>();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddCollateralCallDelegationRequestsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class ApplyDelegationsCall extends ethereum.Call {
  get inputs(): ApplyDelegationsCall__Inputs {
    return new ApplyDelegationsCall__Inputs(this);
  }

  get outputs(): ApplyDelegationsCall__Outputs {
    return new ApplyDelegationsCall__Outputs(this);
  }
}

export class ApplyDelegationsCall__Inputs {
  _call: ApplyDelegationsCall;

  constructor(call: ApplyDelegationsCall) {
    this._call = call;
  }

  get delegationRequests(): Array<ApplyDelegationsCallDelegationRequestsStruct> {
    return this._call.inputValues[0].value.toTupleArray<ApplyDelegationsCallDelegationRequestsStruct>();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApplyDelegationsCall__Outputs {
  _call: ApplyDelegationsCall;

  constructor(call: ApplyDelegationsCall) {
    this._call = call;
  }

  get totalDelegated(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get totalUndelegated(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get undelegatedBalance(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ApplyDelegationsCallDelegationRequestsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class ApplyUnhealthyDelegationsCall extends ethereum.Call {
  get inputs(): ApplyUnhealthyDelegationsCall__Inputs {
    return new ApplyUnhealthyDelegationsCall__Inputs(this);
  }

  get outputs(): ApplyUnhealthyDelegationsCall__Outputs {
    return new ApplyUnhealthyDelegationsCall__Outputs(this);
  }
}

export class ApplyUnhealthyDelegationsCall__Inputs {
  _call: ApplyUnhealthyDelegationsCall;

  constructor(call: ApplyUnhealthyDelegationsCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get autoRescindMaxNumDelegates(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApplyUnhealthyDelegationsCall__Outputs {
  _call: ApplyUnhealthyDelegationsCall;

  constructor(call: ApplyUnhealthyDelegationsCall) {
    this._call = call;
  }

  get totalUndelegated(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get undelegatedBalance(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BatchLiquidateCall extends ethereum.Call {
  get inputs(): BatchLiquidateCall__Inputs {
    return new BatchLiquidateCall__Inputs(this);
  }

  get outputs(): BatchLiquidateCall__Outputs {
    return new BatchLiquidateCall__Outputs(this);
  }
}

export class BatchLiquidateCall__Inputs {
  _call: BatchLiquidateCall;

  constructor(call: BatchLiquidateCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BatchLiquidateCall__Outputs {
  _call: BatchLiquidateCall;

  constructor(call: BatchLiquidateCall) {
    this._call = call;
  }

  get totalCollateralClaimed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get totalDebtWiped(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get totalLiquidationIncentive(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get amountBorrowed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class CheckpointDebtCall extends ethereum.Call {
  get inputs(): CheckpointDebtCall__Inputs {
    return new CheckpointDebtCall__Inputs(this);
  }

  get outputs(): CheckpointDebtCall__Outputs {
    return new CheckpointDebtCall__Outputs(this);
  }
}

export class CheckpointDebtCall__Inputs {
  _call: CheckpointDebtCall;

  constructor(call: CheckpointDebtCall) {
    this._call = call;
  }
}

export class CheckpointDebtCall__Outputs {
  _call: CheckpointDebtCall;

  constructor(call: CheckpointDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ConfigureDependenciesCall extends ethereum.Call {
  get inputs(): ConfigureDependenciesCall__Inputs {
    return new ConfigureDependenciesCall__Inputs(this);
  }

  get outputs(): ConfigureDependenciesCall__Outputs {
    return new ConfigureDependenciesCall__Outputs(this);
  }
}

export class ConfigureDependenciesCall__Inputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall__Outputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }

  get dependencies(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get amountRepaid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetAuthorizationCall extends ethereum.Call {
  get inputs(): SetAuthorizationCall__Inputs {
    return new SetAuthorizationCall__Inputs(this);
  }

  get outputs(): SetAuthorizationCall__Outputs {
    return new SetAuthorizationCall__Outputs(this);
  }
}

export class SetAuthorizationCall__Inputs {
  _call: SetAuthorizationCall;

  constructor(call: SetAuthorizationCall) {
    this._call = call;
  }

  get authorized(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get authorizationDeadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAuthorizationCall__Outputs {
  _call: SetAuthorizationCall;

  constructor(call: SetAuthorizationCall) {
    this._call = call;
  }
}

export class SetAuthorizationWithSigCall extends ethereum.Call {
  get inputs(): SetAuthorizationWithSigCall__Inputs {
    return new SetAuthorizationWithSigCall__Inputs(this);
  }

  get outputs(): SetAuthorizationWithSigCall__Outputs {
    return new SetAuthorizationWithSigCall__Outputs(this);
  }
}

export class SetAuthorizationWithSigCall__Inputs {
  _call: SetAuthorizationWithSigCall;

  constructor(call: SetAuthorizationWithSigCall) {
    this._call = call;
  }

  get authorization(): SetAuthorizationWithSigCallAuthorizationStruct {
    return changetype<SetAuthorizationWithSigCallAuthorizationStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get signature(): SetAuthorizationWithSigCallSignatureStruct {
    return changetype<SetAuthorizationWithSigCallSignatureStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class SetAuthorizationWithSigCall__Outputs {
  _call: SetAuthorizationWithSigCall;

  constructor(call: SetAuthorizationWithSigCall) {
    this._call = call;
  }
}

export class SetAuthorizationWithSigCallAuthorizationStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get authorized(): Address {
    return this[1].toAddress();
  }

  get authorizationDeadline(): BigInt {
    return this[2].toBigInt();
  }

  get nonce(): BigInt {
    return this[3].toBigInt();
  }

  get signatureDeadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetAuthorizationWithSigCallSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class SetBorrowPausedCall extends ethereum.Call {
  get inputs(): SetBorrowPausedCall__Inputs {
    return new SetBorrowPausedCall__Inputs(this);
  }

  get outputs(): SetBorrowPausedCall__Outputs {
    return new SetBorrowPausedCall__Outputs(this);
  }
}

export class SetBorrowPausedCall__Inputs {
  _call: SetBorrowPausedCall;

  constructor(call: SetBorrowPausedCall) {
    this._call = call;
  }

  get isPaused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetBorrowPausedCall__Outputs {
  _call: SetBorrowPausedCall;

  constructor(call: SetBorrowPausedCall) {
    this._call = call;
  }
}

export class SetInterestRateWadCall extends ethereum.Call {
  get inputs(): SetInterestRateWadCall__Inputs {
    return new SetInterestRateWadCall__Inputs(this);
  }

  get outputs(): SetInterestRateWadCall__Outputs {
    return new SetInterestRateWadCall__Outputs(this);
  }
}

export class SetInterestRateWadCall__Inputs {
  _call: SetInterestRateWadCall;

  constructor(call: SetInterestRateWadCall) {
    this._call = call;
  }

  get newInterestRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInterestRateWadCall__Outputs {
  _call: SetInterestRateWadCall;

  constructor(call: SetInterestRateWadCall) {
    this._call = call;
  }
}

export class SetLiquidationsPausedCall extends ethereum.Call {
  get inputs(): SetLiquidationsPausedCall__Inputs {
    return new SetLiquidationsPausedCall__Inputs(this);
  }

  get outputs(): SetLiquidationsPausedCall__Outputs {
    return new SetLiquidationsPausedCall__Outputs(this);
  }
}

export class SetLiquidationsPausedCall__Inputs {
  _call: SetLiquidationsPausedCall;

  constructor(call: SetLiquidationsPausedCall) {
    this._call = call;
  }

  get isPaused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetLiquidationsPausedCall__Outputs {
  _call: SetLiquidationsPausedCall;

  constructor(call: SetLiquidationsPausedCall) {
    this._call = call;
  }
}

export class SetLtvOracleCall extends ethereum.Call {
  get inputs(): SetLtvOracleCall__Inputs {
    return new SetLtvOracleCall__Inputs(this);
  }

  get outputs(): SetLtvOracleCall__Outputs {
    return new SetLtvOracleCall__Outputs(this);
  }
}

export class SetLtvOracleCall__Inputs {
  _call: SetLtvOracleCall;

  constructor(call: SetLtvOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLtvOracleCall__Outputs {
  _call: SetLtvOracleCall;

  constructor(call: SetLtvOracleCall) {
    this._call = call;
  }
}

export class SetMaxDelegateAddressesCall extends ethereum.Call {
  get inputs(): SetMaxDelegateAddressesCall__Inputs {
    return new SetMaxDelegateAddressesCall__Inputs(this);
  }

  get outputs(): SetMaxDelegateAddressesCall__Outputs {
    return new SetMaxDelegateAddressesCall__Outputs(this);
  }
}

export class SetMaxDelegateAddressesCall__Inputs {
  _call: SetMaxDelegateAddressesCall;

  constructor(call: SetMaxDelegateAddressesCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxDelegateAddresses(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxDelegateAddressesCall__Outputs {
  _call: SetMaxDelegateAddressesCall;

  constructor(call: SetMaxDelegateAddressesCall) {
    this._call = call;
  }
}

export class SetTreasuryBorrowerCall extends ethereum.Call {
  get inputs(): SetTreasuryBorrowerCall__Inputs {
    return new SetTreasuryBorrowerCall__Inputs(this);
  }

  get outputs(): SetTreasuryBorrowerCall__Outputs {
    return new SetTreasuryBorrowerCall__Outputs(this);
  }
}

export class SetTreasuryBorrowerCall__Inputs {
  _call: SetTreasuryBorrowerCall;

  constructor(call: SetTreasuryBorrowerCall) {
    this._call = call;
  }

  get newTreasuryBorrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryBorrowerCall__Outputs {
  _call: SetTreasuryBorrowerCall;

  constructor(call: SetTreasuryBorrowerCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get delegationRequests(): Array<WithdrawCollateralCallDelegationRequestsStruct> {
    return this._call.inputValues[3].value.toTupleArray<WithdrawCollateralCallDelegationRequestsStruct>();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get collateralWithdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCollateralCallDelegationRequestsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}
