// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class DelegateStaked extends ethereum.Event {
  get params(): DelegateStaked__Params {
    return new DelegateStaked__Params(this);
  }
}

export class DelegateStaked__Params {
  _event: DelegateStaked;

  constructor(event: DelegateStaked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegateWithdrawn extends ethereum.Event {
  get params(): DelegateWithdrawn__Params {
    return new DelegateWithdrawn__Params(this);
  }
}

export class DelegateWithdrawn__Params {
  _event: DelegateWithdrawn;

  constructor(event: DelegateWithdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DistributorSet extends ethereum.Event {
  get params(): DistributorSet__Params {
    return new DistributorSet__Params(this);
  }
}

export class DistributorSet__Params {
  _event: DistributorSet;

  constructor(event: DistributorSet) {
    this._event = event;
  }

  get distributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IncentiveAdded extends ethereum.Event {
  get params(): IncentiveAdded__Params {
    return new IncentiveAdded__Params(this);
  }
}

export class IncentiveAdded__Params {
  _event: IncentiveAdded;

  constructor(event: IncentiveAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get incentiveRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IncentiveManagerChanged extends ethereum.Event {
  get params(): IncentiveManagerChanged__Params {
    return new IncentiveManagerChanged__Params(this);
  }
}

export class IncentiveManagerChanged__Params {
  _event: IncentiveManagerChanged;

  constructor(event: IncentiveManagerChanged) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldManager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class IncentiveTokenRemoved extends ethereum.Event {
  get params(): IncentiveTokenRemoved__Params {
    return new IncentiveTokenRemoved__Params(this);
  }
}

export class IncentiveTokenRemoved__Params {
  _event: IncentiveTokenRemoved;

  constructor(event: IncentiveTokenRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IncentiveTokenWhitelisted extends ethereum.Event {
  get params(): IncentiveTokenWhitelisted__Params {
    return new IncentiveTokenWhitelisted__Params(this);
  }
}

export class IncentiveTokenWhitelisted__Params {
  _event: IncentiveTokenWhitelisted;

  constructor(event: IncentiveTokenWhitelisted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minIncentiveRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class IncentivesProcessFailed extends ethereum.Event {
  get params(): IncentivesProcessFailed__Params {
    return new IncentivesProcessFailed__Params(this);
  }
}

export class IncentivesProcessFailed__Params {
  _event: IncentivesProcessFailed;

  constructor(event: IncentivesProcessFailed) {
    this._event = event;
  }

  get pubkey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bgtEmitted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IncentivesProcessed extends ethereum.Event {
  get params(): IncentivesProcessed__Params {
    return new IncentivesProcessed__Params(this);
  }
}

export class IncentivesProcessed__Params {
  _event: IncentivesProcessed;

  constructor(event: IncentivesProcessed) {
    this._event = event;
  }

  get pubkey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bgtEmitted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MaxIncentiveTokensCountUpdated extends ethereum.Event {
  get params(): MaxIncentiveTokensCountUpdated__Params {
    return new MaxIncentiveTokensCountUpdated__Params(this);
  }
}

export class MaxIncentiveTokensCountUpdated__Params {
  _event: MaxIncentiveTokensCountUpdated;

  constructor(event: MaxIncentiveTokensCountUpdated) {
    this._event = event;
  }

  get maxIncentiveTokensCount(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OperatorSet extends ethereum.Event {
  get params(): OperatorSet__Params {
    return new OperatorSet__Params(this);
  }
}

export class OperatorSet__Params {
  _event: OperatorSet;

  constructor(event: OperatorSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Recovered extends ethereum.Event {
  get params(): Recovered__Params {
    return new Recovered__Params(this);
  }
}

export class Recovered__Params {
  _event: Recovered;

  constructor(event: Recovered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsDurationUpdated extends ethereum.Event {
  get params(): RewardsDurationUpdated__Params {
    return new RewardsDurationUpdated__Params(this);
  }
}

export class RewardsDurationUpdated__Params {
  _event: RewardsDurationUpdated;

  constructor(event: RewardsDurationUpdated) {
    this._event = event;
  }

  get newDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BeradromeKodiakIslandRewardVault__incentivesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getMinIncentiveRate(): BigInt {
    return this.value0;
  }

  getIncentiveRate(): BigInt {
    return this.value1;
  }

  getAmountRemaining(): BigInt {
    return this.value2;
  }

  getManager(): Address {
    return this.value3;
  }
}

export class BeradromeKodiakIslandRewardVault extends ethereum.SmartContract {
  static bind(address: Address): BeradromeKodiakIslandRewardVault {
    return new BeradromeKodiakIslandRewardVault(
      "BeradromeKodiakIslandRewardVault",
      address,
    );
  }

  balanceOf(account: Address): BigInt {
    const result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beaconDepositContract(): Address {
    const result = super.call(
      "beaconDepositContract",
      "beaconDepositContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_beaconDepositContract(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "beaconDepositContract",
      "beaconDepositContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  distributor(): Address {
    const result = super.call("distributor", "distributor():(address)", []);

    return result[0].toAddress();
  }

  try_distributor(): ethereum.CallResult<Address> {
    const result = super.tryCall("distributor", "distributor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  earned(account: Address): BigInt {
    const result = super.call("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_earned(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("earned", "earned(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    const result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    const result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDelegateStake(account: Address, delegate: Address): BigInt {
    const result = super.call(
      "getDelegateStake",
      "getDelegateStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(delegate),
      ],
    );

    return result[0].toBigInt();
  }

  try_getDelegateStake(
    account: Address,
    delegate: Address,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getDelegateStake",
      "getDelegateStake(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(delegate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReward(account: Address, recipient: Address): BigInt {
    const result = super.call(
      "getReward",
      "getReward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(recipient),
      ],
    );

    return result[0].toBigInt();
  }

  try_getReward(
    account: Address,
    recipient: Address,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getReward",
      "getReward(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(recipient),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardForDuration(): BigInt {
    const result = super.call(
      "getRewardForDuration",
      "getRewardForDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getRewardForDuration(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getRewardForDuration",
      "getRewardForDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDelegateStaked(account: Address): BigInt {
    const result = super.call(
      "getTotalDelegateStaked",
      "getTotalDelegateStaked(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_getTotalDelegateStaked(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTotalDelegateStaked",
      "getTotalDelegateStaked(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWhitelistedTokens(): Array<Address> {
    const result = super.call(
      "getWhitelistedTokens",
      "getWhitelistedTokens():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getWhitelistedTokens(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getWhitelistedTokens",
      "getWhitelistedTokens():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWhitelistedTokensCount(): BigInt {
    const result = super.call(
      "getWhitelistedTokensCount",
      "getWhitelistedTokensCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getWhitelistedTokensCount(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getWhitelistedTokensCount",
      "getWhitelistedTokensCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  incentives(
    token: Address,
  ): BeradromeKodiakIslandRewardVault__incentivesResult {
    const result = super.call(
      "incentives",
      "incentives(address):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromAddress(token)],
    );

    return new BeradromeKodiakIslandRewardVault__incentivesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
    );
  }

  try_incentives(
    token: Address,
  ): ethereum.CallResult<BeradromeKodiakIslandRewardVault__incentivesResult> {
    const result = super.tryCall(
      "incentives",
      "incentives(address):(uint256,uint256,uint256,address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new BeradromeKodiakIslandRewardVault__incentivesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
      ),
    );
  }

  isFactoryOwner(user: Address): boolean {
    const result = super.call(
      "isFactoryOwner",
      "isFactoryOwner(address):(bool)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBoolean();
  }

  try_isFactoryOwner(user: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isFactoryOwner",
      "isFactoryOwner(address):(bool)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFactoryVaultManager(user: Address): boolean {
    const result = super.call(
      "isFactoryVaultManager",
      "isFactoryVaultManager(address):(bool)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBoolean();
  }

  try_isFactoryVaultManager(user: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isFactoryVaultManager",
      "isFactoryVaultManager(address):(bool)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFactoryVaultPauser(user: Address): boolean {
    const result = super.call(
      "isFactoryVaultPauser",
      "isFactoryVaultPauser(address):(bool)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBoolean();
  }

  try_isFactoryVaultPauser(user: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isFactoryVaultPauser",
      "isFactoryVaultPauser(address):(bool)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeRewardApplicable(): BigInt {
    const result = super.call(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastTimeRewardApplicable(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "lastTimeRewardApplicable",
      "lastTimeRewardApplicable():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdateTime(): BigInt {
    const result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxIncentiveTokensCount(): i32 {
    const result = super.call(
      "maxIncentiveTokensCount",
      "maxIncentiveTokensCount():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_maxIncentiveTokensCount(): ethereum.CallResult<i32> {
    const result = super.tryCall(
      "maxIncentiveTokensCount",
      "maxIncentiveTokensCount():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  operator(account: Address): Address {
    const result = super.call("operator", "operator(address):(address)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toAddress();
  }

  try_operator(account: Address): ethereum.CallResult<Address> {
    const result = super.tryCall("operator", "operator(address):(address)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    const result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    const result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  periodFinish(): BigInt {
    const result = super.call("periodFinish", "periodFinish():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodFinish(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("periodFinish", "periodFinish():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerToken(): BigInt {
    const result = super.call("rewardPerToken", "rewardPerToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "rewardPerToken",
      "rewardPerToken():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerTokenStored(): BigInt {
    const result = super.call(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardPerTokenStored(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "rewardPerTokenStored",
      "rewardPerTokenStored():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(): BigInt {
    const result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    const result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    const result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewards(account: Address): BigInt {
    const result = super.call("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_rewards(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("rewards", "rewards(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsDuration(): BigInt {
    const result = super.call(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardsDuration(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "rewardsDuration",
      "rewardsDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeToken(): Address {
    const result = super.call("stakeToken", "stakeToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakeToken(): ethereum.CallResult<Address> {
    const result = super.tryCall("stakeToken", "stakeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    const result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  undistributedRewards(): BigInt {
    const result = super.call(
      "undistributedRewards",
      "undistributedRewards():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_undistributedRewards(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "undistributedRewards",
      "undistributedRewards():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardPerTokenPaid(account: Address): BigInt {
    const result = super.call(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_userRewardPerTokenPaid(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "userRewardPerTokenPaid",
      "userRewardPerTokenPaid(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistedTokens(param0: BigInt): Address {
    const result = super.call(
      "whitelistedTokens",
      "whitelistedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_whitelistedTokens(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "whitelistedTokens",
      "whitelistedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddIncentiveCall extends ethereum.Call {
  get inputs(): AddIncentiveCall__Inputs {
    return new AddIncentiveCall__Inputs(this);
  }

  get outputs(): AddIncentiveCall__Outputs {
    return new AddIncentiveCall__Outputs(this);
  }
}

export class AddIncentiveCall__Inputs {
  _call: AddIncentiveCall;

  constructor(call: AddIncentiveCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get incentiveRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddIncentiveCall__Outputs {
  _call: AddIncentiveCall;

  constructor(call: AddIncentiveCall) {
    this._call = call;
  }
}

export class DelegateStakeCall extends ethereum.Call {
  get inputs(): DelegateStakeCall__Inputs {
    return new DelegateStakeCall__Inputs(this);
  }

  get outputs(): DelegateStakeCall__Outputs {
    return new DelegateStakeCall__Outputs(this);
  }
}

export class DelegateStakeCall__Inputs {
  _call: DelegateStakeCall;

  constructor(call: DelegateStakeCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DelegateStakeCall__Outputs {
  _call: DelegateStakeCall;

  constructor(call: DelegateStakeCall) {
    this._call = call;
  }
}

export class DelegateWithdrawCall extends ethereum.Call {
  get inputs(): DelegateWithdrawCall__Inputs {
    return new DelegateWithdrawCall__Inputs(this);
  }

  get outputs(): DelegateWithdrawCall__Outputs {
    return new DelegateWithdrawCall__Outputs(this);
  }
}

export class DelegateWithdrawCall__Inputs {
  _call: DelegateWithdrawCall;

  constructor(call: DelegateWithdrawCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DelegateWithdrawCall__Outputs {
  _call: DelegateWithdrawCall;

  constructor(call: DelegateWithdrawCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _beaconDepositContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bgt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _distributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get pubkey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get reward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RemoveIncentiveTokenCall extends ethereum.Call {
  get inputs(): RemoveIncentiveTokenCall__Inputs {
    return new RemoveIncentiveTokenCall__Inputs(this);
  }

  get outputs(): RemoveIncentiveTokenCall__Outputs {
    return new RemoveIncentiveTokenCall__Outputs(this);
  }
}

export class RemoveIncentiveTokenCall__Inputs {
  _call: RemoveIncentiveTokenCall;

  constructor(call: RemoveIncentiveTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveIncentiveTokenCall__Outputs {
  _call: RemoveIncentiveTokenCall;

  constructor(call: RemoveIncentiveTokenCall) {
    this._call = call;
  }
}

export class SetDistributorCall extends ethereum.Call {
  get inputs(): SetDistributorCall__Inputs {
    return new SetDistributorCall__Inputs(this);
  }

  get outputs(): SetDistributorCall__Outputs {
    return new SetDistributorCall__Outputs(this);
  }
}

export class SetDistributorCall__Inputs {
  _call: SetDistributorCall;

  constructor(call: SetDistributorCall) {
    this._call = call;
  }

  get _rewardDistribution(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDistributorCall__Outputs {
  _call: SetDistributorCall;

  constructor(call: SetDistributorCall) {
    this._call = call;
  }
}

export class SetMaxIncentiveTokensCountCall extends ethereum.Call {
  get inputs(): SetMaxIncentiveTokensCountCall__Inputs {
    return new SetMaxIncentiveTokensCountCall__Inputs(this);
  }

  get outputs(): SetMaxIncentiveTokensCountCall__Outputs {
    return new SetMaxIncentiveTokensCountCall__Outputs(this);
  }
}

export class SetMaxIncentiveTokensCountCall__Inputs {
  _call: SetMaxIncentiveTokensCountCall;

  constructor(call: SetMaxIncentiveTokensCountCall) {
    this._call = call;
  }

  get _maxIncentiveTokensCount(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetMaxIncentiveTokensCountCall__Outputs {
  _call: SetMaxIncentiveTokensCountCall;

  constructor(call: SetMaxIncentiveTokensCountCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetRewardsDurationCall extends ethereum.Call {
  get inputs(): SetRewardsDurationCall__Inputs {
    return new SetRewardsDurationCall__Inputs(this);
  }

  get outputs(): SetRewardsDurationCall__Outputs {
    return new SetRewardsDurationCall__Outputs(this);
  }
}

export class SetRewardsDurationCall__Inputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }

  get _rewardsDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardsDurationCall__Outputs {
  _call: SetRewardsDurationCall;

  constructor(call: SetRewardsDurationCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateIncentiveManagerCall extends ethereum.Call {
  get inputs(): UpdateIncentiveManagerCall__Inputs {
    return new UpdateIncentiveManagerCall__Inputs(this);
  }

  get outputs(): UpdateIncentiveManagerCall__Outputs {
    return new UpdateIncentiveManagerCall__Outputs(this);
  }
}

export class UpdateIncentiveManagerCall__Inputs {
  _call: UpdateIncentiveManagerCall;

  constructor(call: UpdateIncentiveManagerCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateIncentiveManagerCall__Outputs {
  _call: UpdateIncentiveManagerCall;

  constructor(call: UpdateIncentiveManagerCall) {
    this._call = call;
  }
}

export class WhitelistIncentiveTokenCall extends ethereum.Call {
  get inputs(): WhitelistIncentiveTokenCall__Inputs {
    return new WhitelistIncentiveTokenCall__Inputs(this);
  }

  get outputs(): WhitelistIncentiveTokenCall__Outputs {
    return new WhitelistIncentiveTokenCall__Outputs(this);
  }
}

export class WhitelistIncentiveTokenCall__Inputs {
  _call: WhitelistIncentiveTokenCall;

  constructor(call: WhitelistIncentiveTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minIncentiveRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WhitelistIncentiveTokenCall__Outputs {
  _call: WhitelistIncentiveTokenCall;

  constructor(call: WhitelistIncentiveTokenCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
