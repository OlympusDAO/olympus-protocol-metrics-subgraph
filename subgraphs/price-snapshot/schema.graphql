type PriceSnapshot @entity(immutable: true) {
  id: ID! # Block number
  block: BigInt!
  timestamp: BigInt!
  date: String!
  ohmUsdPrice: BigDecimal!
  ohmUsdPrice1dDelta: BigDecimal
  ohmUsdPrice30dVolatility: BigDecimal
  gOhmUsdPrice: BigDecimal!
}

# Used to access the latest PriceSnapshot for a particular date
type PriceSnapshotDaily @entity {
  id: ID! # YYYY-MM-DD
  record: String! # ID of latest PriceSnapshot
}

### Added from protocol-metrics subgraph. Used for pricing.

type ERC20TokenSnapshot @entity(immutable: true) {
  id: Bytes! # address/block
  address: Bytes!
  decimals: Int!
  totalSupply: BigDecimal
}

type ConvexRewardPoolSnapshot @entity(immutable: true) {
  id: ID! # lowercase address/block
  block: BigInt!
  address: Bytes!
  stakingToken: Bytes!
}

# TODO migrate to PoolSnapshot
type BalancerPoolSnapshot @entity(immutable: true) {
  id: Bytes! # pool id/block
  block: BigInt!
  pool: Bytes!
  poolToken: Bytes!
  decimals: Int!
  totalSupply: BigDecimal!
  tokens: [Bytes!]!
  balances: [BigDecimal!]!
  weights: [BigDecimal!]!
}

type PoolSnapshot @entity(immutable: true) {
  id: Bytes! # pool/block
  block: BigInt!
  pool: Bytes!
  poolToken: Bytes
  decimals: Int!
  totalSupply: BigDecimal!
  tokens: [Bytes!]!
  balances: [BigDecimal!]!
  weights: [BigDecimal!]
}

type TokenPriceSnapshot @entity(immutable: true) {
  id: Bytes! # address/block
  block: BigInt!
  token: Bytes!
  price: BigDecimal!
}

type StakingPoolSnapshot @entity(immutable: true) {
  id: Bytes! # address/block
  block: BigInt!
  contractAddress: Bytes!
  stakingToken: Bytes # Will not be set if the call reverts
}
