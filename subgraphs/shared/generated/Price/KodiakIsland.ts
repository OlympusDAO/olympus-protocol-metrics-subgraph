// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get burnAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityBurned(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FeesEarned extends ethereum.Event {
  get params(): FeesEarned__Params {
    return new FeesEarned__Params(this);
  }
}

export class FeesEarned__Params {
  _event: FeesEarned;

  constructor(event: FeesEarned) {
    this._event = event;
  }

  get feesEarned0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feesEarned1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityMinted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserSet extends ethereum.Event {
  get params(): PauserSet__Params {
    return new PauserSet__Params(this);
  }
}

export class PauserSet__Params {
  _event: PauserSet;

  constructor(event: PauserSet) {
    this._event = event;
  }

  get pauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Rebalance extends ethereum.Event {
  get params(): Rebalance__Params {
    return new Rebalance__Params(this);
  }
}

export class Rebalance__Params {
  _event: Rebalance;

  constructor(event: Rebalance) {
    this._event = event;
  }

  get compounder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lowerTick_(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get upperTick_(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get liquidityBefore(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityAfter(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RestrictedMintSet extends ethereum.Event {
  get params(): RestrictedMintSet__Params {
    return new RestrictedMintSet__Params(this);
  }
}

export class RestrictedMintSet__Params {
  _event: RestrictedMintSet;

  constructor(event: RestrictedMintSet) {
    this._event = event;
  }

  get status(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class RouterSet extends ethereum.Event {
  get params(): RouterSet__Params {
    return new RouterSet__Params(this);
  }
}

export class RouterSet__Params {
  _event: RouterSet;

  constructor(event: RouterSet) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateManagerParams extends ethereum.Event {
  get params(): UpdateManagerParams__Params {
    return new UpdateManagerParams__Params(this);
  }
}

export class UpdateManagerParams__Params {
  _event: UpdateManagerParams;

  constructor(event: UpdateManagerParams) {
    this._event = event;
  }

  get managerFeeBPS(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get managerTreasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get compounderSlippageBPS(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get compounderSlippageInterval(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KodiakIsland__burnResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getLiquidityBurned(): BigInt {
    return this.value2;
  }
}

export class KodiakIsland__getMintAmountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getMintAmount(): BigInt {
    return this.value2;
  }
}

export class KodiakIsland__getUnderlyingBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0Current(): BigInt {
    return this.value0;
  }

  getAmount1Current(): BigInt {
    return this.value1;
  }
}

export class KodiakIsland__getUnderlyingBalancesAtPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0Current(): BigInt {
    return this.value0;
  }

  getAmount1Current(): BigInt {
    return this.value1;
  }
}

export class KodiakIsland__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getLiquidityMinted(): BigInt {
    return this.value2;
  }
}

export class KodiakIsland extends ethereum.SmartContract {
  static bind(address: Address): KodiakIsland {
    return new KodiakIsland("KodiakIsland", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    const result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    const result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    const result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    const result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(burnAmount: BigInt, receiver: Address): KodiakIsland__burnResult {
    const result = super.call(
      "burn",
      "burn(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return new KodiakIsland__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_burn(
    burnAmount: BigInt,
    receiver: Address,
  ): ethereum.CallResult<KodiakIsland__burnResult> {
    const result = super.tryCall(
      "burn",
      "burn(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new KodiakIsland__burnResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  compounderSlippageBPS(): i32 {
    const result = super.call(
      "compounderSlippageBPS",
      "compounderSlippageBPS():(uint16)",
      [],
    );

    return result[0].toI32();
  }

  try_compounderSlippageBPS(): ethereum.CallResult<i32> {
    const result = super.tryCall(
      "compounderSlippageBPS",
      "compounderSlippageBPS():(uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  compounderSlippageInterval(): BigInt {
    const result = super.call(
      "compounderSlippageInterval",
      "compounderSlippageInterval():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_compounderSlippageInterval(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "compounderSlippageInterval",
      "compounderSlippageInterval():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    const result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    const result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAvgPrice(interval: BigInt): BigInt {
    const result = super.call("getAvgPrice", "getAvgPrice(uint32):(uint160)", [
      ethereum.Value.fromUnsignedBigInt(interval),
    ]);

    return result[0].toBigInt();
  }

  try_getAvgPrice(interval: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall("getAvgPrice", "getAvgPrice(uint32):(uint160)", [
      ethereum.Value.fromUnsignedBigInt(interval),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMintAmounts(
    amount0Max: BigInt,
    amount1Max: BigInt,
  ): KodiakIsland__getMintAmountsResult {
    const result = super.call(
      "getMintAmounts",
      "getMintAmounts(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0Max),
        ethereum.Value.fromUnsignedBigInt(amount1Max),
      ],
    );

    return new KodiakIsland__getMintAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getMintAmounts(
    amount0Max: BigInt,
    amount1Max: BigInt,
  ): ethereum.CallResult<KodiakIsland__getMintAmountsResult> {
    const result = super.tryCall(
      "getMintAmounts",
      "getMintAmounts(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0Max),
        ethereum.Value.fromUnsignedBigInt(amount1Max),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new KodiakIsland__getMintAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getPositionID(): Bytes {
    const result = super.call("getPositionID", "getPositionID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPositionID(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "getPositionID",
      "getPositionID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnderlyingBalances(): KodiakIsland__getUnderlyingBalancesResult {
    const result = super.call(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      [],
    );

    return new KodiakIsland__getUnderlyingBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getUnderlyingBalances(): ethereum.CallResult<KodiakIsland__getUnderlyingBalancesResult> {
    const result = super.tryCall(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new KodiakIsland__getUnderlyingBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getUnderlyingBalancesAtPrice(
    sqrtRatioX96: BigInt,
  ): KodiakIsland__getUnderlyingBalancesAtPriceResult {
    const result = super.call(
      "getUnderlyingBalancesAtPrice",
      "getUnderlyingBalancesAtPrice(uint160):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(sqrtRatioX96)],
    );

    return new KodiakIsland__getUnderlyingBalancesAtPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getUnderlyingBalancesAtPrice(
    sqrtRatioX96: BigInt,
  ): ethereum.CallResult<KodiakIsland__getUnderlyingBalancesAtPriceResult> {
    const result = super.tryCall(
      "getUnderlyingBalancesAtPrice",
      "getUnderlyingBalancesAtPrice(uint160):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(sqrtRatioX96)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new KodiakIsland__getUnderlyingBalancesAtPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  isManaged(): boolean {
    const result = super.call("isManaged", "isManaged():(bool)", []);

    return result[0].toBoolean();
  }

  try_isManaged(): ethereum.CallResult<boolean> {
    const result = super.tryCall("isManaged", "isManaged():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  islandFactory(): Address {
    const result = super.call("islandFactory", "islandFactory():(address)", []);

    return result[0].toAddress();
  }

  try_islandFactory(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "islandFactory",
      "islandFactory():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lowerTick(): i32 {
    const result = super.call("lowerTick", "lowerTick():(int24)", []);

    return result[0].toI32();
  }

  try_lowerTick(): ethereum.CallResult<i32> {
    const result = super.tryCall("lowerTick", "lowerTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  manager(): Address {
    const result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    const result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerBalance0(): BigInt {
    const result = super.call(
      "managerBalance0",
      "managerBalance0():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_managerBalance0(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "managerBalance0",
      "managerBalance0():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerBalance1(): BigInt {
    const result = super.call(
      "managerBalance1",
      "managerBalance1():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_managerBalance1(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "managerBalance1",
      "managerBalance1():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerFeeBPS(): i32 {
    const result = super.call("managerFeeBPS", "managerFeeBPS():(uint16)", []);

    return result[0].toI32();
  }

  try_managerFeeBPS(): ethereum.CallResult<i32> {
    const result = super.tryCall("managerFeeBPS", "managerFeeBPS():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  managerTreasury(): Address {
    const result = super.call(
      "managerTreasury",
      "managerTreasury():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_managerTreasury(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "managerTreasury",
      "managerTreasury():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mint(mintAmount: BigInt, receiver: Address): KodiakIsland__mintResult {
    const result = super.call(
      "mint",
      "mint(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return new KodiakIsland__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_mint(
    mintAmount: BigInt,
    receiver: Address,
  ): ethereum.CallResult<KodiakIsland__mintResult> {
    const result = super.tryCall(
      "mint",
      "mint(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new KodiakIsland__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  name(): string {
    const result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    const result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    const result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    const result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pauser(param0: Address): boolean {
    const result = super.call("pauser", "pauser(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_pauser(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall("pauser", "pauser(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pool(): Address {
    const result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    const result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  restrictedMint(): boolean {
    const result = super.call("restrictedMint", "restrictedMint():(bool)", []);

    return result[0].toBoolean();
  }

  try_restrictedMint(): ethereum.CallResult<boolean> {
    const result = super.tryCall("restrictedMint", "restrictedMint():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapRouter(param0: Address): boolean {
    const result = super.call("swapRouter", "swapRouter(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_swapRouter(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall("swapRouter", "swapRouter(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    const result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    const result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    const result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    const result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    const result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    const result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    const result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    const result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    const result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  upperTick(): i32 {
    const result = super.call("upperTick", "upperTick():(int24)", []);

    return result[0].toI32();
  }

  try_upperTick(): ethereum.CallResult<i32> {
    const result = super.tryCall("upperTick", "upperTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  version(): string {
    const result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    const result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  worstAmountOut(
    amountIn: BigInt,
    slippageBPS: i32,
    avgSqrtPriceX96: BigInt,
    zeroForOne: boolean,
  ): BigInt {
    const result = super.call(
      "worstAmountOut",
      "worstAmountOut(uint256,uint16,uint160,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(slippageBPS)),
        ethereum.Value.fromUnsignedBigInt(avgSqrtPriceX96),
        ethereum.Value.fromBoolean(zeroForOne),
      ],
    );

    return result[0].toBigInt();
  }

  try_worstAmountOut(
    amountIn: BigInt,
    slippageBPS: i32,
    avgSqrtPriceX96: BigInt,
    zeroForOne: boolean,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "worstAmountOut",
      "worstAmountOut(uint256,uint16,uint160,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(slippageBPS)),
        ethereum.Value.fromUnsignedBigInt(avgSqrtPriceX96),
        ethereum.Value.fromBoolean(zeroForOne),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get burnAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityBurned(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class ExecutiveRebalanceCall extends ethereum.Call {
  get inputs(): ExecutiveRebalanceCall__Inputs {
    return new ExecutiveRebalanceCall__Inputs(this);
  }

  get outputs(): ExecutiveRebalanceCall__Outputs {
    return new ExecutiveRebalanceCall__Outputs(this);
  }
}

export class ExecutiveRebalanceCall__Inputs {
  _call: ExecutiveRebalanceCall;

  constructor(call: ExecutiveRebalanceCall) {
    this._call = call;
  }

  get newLowerTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newUpperTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get swapThresholdPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get swapAmountBPS(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ExecutiveRebalanceCall__Outputs {
  _call: ExecutiveRebalanceCall;

  constructor(call: ExecutiveRebalanceCall) {
    this._call = call;
  }
}

export class ExecutiveRebalanceWithRouterCall extends ethereum.Call {
  get inputs(): ExecutiveRebalanceWithRouterCall__Inputs {
    return new ExecutiveRebalanceWithRouterCall__Inputs(this);
  }

  get outputs(): ExecutiveRebalanceWithRouterCall__Outputs {
    return new ExecutiveRebalanceWithRouterCall__Outputs(this);
  }
}

export class ExecutiveRebalanceWithRouterCall__Inputs {
  _call: ExecutiveRebalanceWithRouterCall;

  constructor(call: ExecutiveRebalanceWithRouterCall) {
    this._call = call;
  }

  get newLowerTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newUpperTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get swapData(): ExecutiveRebalanceWithRouterCallSwapDataStruct {
    return changetype<ExecutiveRebalanceWithRouterCallSwapDataStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class ExecutiveRebalanceWithRouterCall__Outputs {
  _call: ExecutiveRebalanceWithRouterCall;

  constructor(call: ExecutiveRebalanceWithRouterCall) {
    this._call = call;
  }
}

export class ExecutiveRebalanceWithRouterCallSwapDataStruct extends ethereum.Tuple {
  get router(): Address {
    return this[0].toAddress();
  }

  get amountIn(): BigInt {
    return this[1].toBigInt();
  }

  get minAmountOut(): BigInt {
    return this[2].toBigInt();
  }

  get zeroForOne(): boolean {
    return this[3].toBoolean();
  }

  get routeData(): Bytes {
    return this[4].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _pool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _managerFeeBPS(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _lowerTick(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _upperTick(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _manager_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _managerTreasury(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityMinted(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPauserCall extends ethereum.Call {
  get inputs(): SetPauserCall__Inputs {
    return new SetPauserCall__Inputs(this);
  }

  get outputs(): SetPauserCall__Outputs {
    return new SetPauserCall__Outputs(this);
  }
}

export class SetPauserCall__Inputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }

  get _pauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPauserCall__Outputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }
}

export class SetRestrictedMintCall extends ethereum.Call {
  get inputs(): SetRestrictedMintCall__Inputs {
    return new SetRestrictedMintCall__Inputs(this);
  }

  get outputs(): SetRestrictedMintCall__Outputs {
    return new SetRestrictedMintCall__Outputs(this);
  }
}

export class SetRestrictedMintCall__Inputs {
  _call: SetRestrictedMintCall;

  constructor(call: SetRestrictedMintCall) {
    this._call = call;
  }

  get _status(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetRestrictedMintCall__Outputs {
  _call: SetRestrictedMintCall;

  constructor(call: SetRestrictedMintCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class SyncToFactoryCall extends ethereum.Call {
  get inputs(): SyncToFactoryCall__Inputs {
    return new SyncToFactoryCall__Inputs(this);
  }

  get outputs(): SyncToFactoryCall__Outputs {
    return new SyncToFactoryCall__Outputs(this);
  }
}

export class SyncToFactoryCall__Inputs {
  _call: SyncToFactoryCall;

  constructor(call: SyncToFactoryCall) {
    this._call = call;
  }
}

export class SyncToFactoryCall__Outputs {
  _call: SyncToFactoryCall;

  constructor(call: SyncToFactoryCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UniswapV3MintCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3MintCallbackCall__Inputs {
    return new UniswapV3MintCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3MintCallbackCall__Outputs {
    return new UniswapV3MintCallbackCall__Outputs(this);
  }
}

export class UniswapV3MintCallbackCall__Inputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }

  get amount0Owed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Owed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3MintCallbackCall__Outputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateManagerParamsCall extends ethereum.Call {
  get inputs(): UpdateManagerParamsCall__Inputs {
    return new UpdateManagerParamsCall__Inputs(this);
  }

  get outputs(): UpdateManagerParamsCall__Outputs {
    return new UpdateManagerParamsCall__Outputs(this);
  }
}

export class UpdateManagerParamsCall__Inputs {
  _call: UpdateManagerParamsCall;

  constructor(call: UpdateManagerParamsCall) {
    this._call = call;
  }

  get newManagerFeeBPS(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newManagerTreasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newSlippageBPS(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get newSlippageInterval(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateManagerParamsCall__Outputs {
  _call: UpdateManagerParamsCall;

  constructor(call: UpdateManagerParamsCall) {
    this._call = call;
  }
}

export class WithdrawManagerBalanceCall extends ethereum.Call {
  get inputs(): WithdrawManagerBalanceCall__Inputs {
    return new WithdrawManagerBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawManagerBalanceCall__Outputs {
    return new WithdrawManagerBalanceCall__Outputs(this);
  }
}

export class WithdrawManagerBalanceCall__Inputs {
  _call: WithdrawManagerBalanceCall;

  constructor(call: WithdrawManagerBalanceCall) {
    this._call = call;
  }
}

export class WithdrawManagerBalanceCall__Outputs {
  _call: WithdrawManagerBalanceCall;

  constructor(call: WithdrawManagerBalanceCall) {
    this._call = call;
  }
}
