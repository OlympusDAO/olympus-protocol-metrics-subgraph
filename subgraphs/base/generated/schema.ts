// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  BigDecimal,
  BigInt,
  Bytes,
  Entity,
  store,
  TypedMap,
  Value,
  ValueKind,
} from "@graphprotocol/graph-ts";

export class ProtocolMetric extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save ProtocolMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolMetric must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProtocolMetric", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(
      store.get_in_block("ProtocolMetric", id.toHexString()),
    );
  }

  static load(id: Bytes): ProtocolMetric | null {
    return changetype<ProtocolMetric | null>(
      store.get("ProtocolMetric", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get currentAPY(): BigDecimal {
    const value = this.get("currentAPY");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set currentAPY(value: BigDecimal) {
    this.set("currentAPY", Value.fromBigDecimal(value));
  }

  get currentIndex(): BigDecimal {
    const value = this.get("currentIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set currentIndex(value: BigDecimal) {
    this.set("currentIndex", Value.fromBigDecimal(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get gOhmPrice(): BigDecimal {
    const value = this.get("gOhmPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set gOhmPrice(value: BigDecimal) {
    this.set("gOhmPrice", Value.fromBigDecimal(value));
  }

  get gOhmSyntheticSupply(): BigDecimal | null {
    const value = this.get("gOhmSyntheticSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set gOhmSyntheticSupply(value: BigDecimal | null) {
    if (!value) {
      this.unset("gOhmSyntheticSupply");
    } else {
      this.set("gOhmSyntheticSupply", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get gOhmTotalSupply(): BigDecimal {
    const value = this.get("gOhmTotalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set gOhmTotalSupply(value: BigDecimal) {
    this.set("gOhmTotalSupply", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal | null {
    const value = this.get("marketCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set marketCap(value: BigDecimal | null) {
    if (!value) {
      this.unset("marketCap");
    } else {
      this.set("marketCap", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get nextDistributedOhm(): BigDecimal {
    const value = this.get("nextDistributedOhm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set nextDistributedOhm(value: BigDecimal) {
    this.set("nextDistributedOhm", Value.fromBigDecimal(value));
  }

  get nextEpochRebase(): BigDecimal {
    const value = this.get("nextEpochRebase");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set nextEpochRebase(value: BigDecimal) {
    this.set("nextEpochRebase", Value.fromBigDecimal(value));
  }

  get ohmCirculatingSupply(): BigDecimal | null {
    const value = this.get("ohmCirculatingSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ohmCirculatingSupply(value: BigDecimal | null) {
    if (!value) {
      this.unset("ohmCirculatingSupply");
    } else {
      this.set("ohmCirculatingSupply", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get ohmFloatingSupply(): BigDecimal | null {
    const value = this.get("ohmFloatingSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ohmFloatingSupply(value: BigDecimal | null) {
    if (!value) {
      this.unset("ohmFloatingSupply");
    } else {
      this.set("ohmFloatingSupply", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get ohmPrice(): BigDecimal {
    const value = this.get("ohmPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set ohmPrice(value: BigDecimal) {
    this.set("ohmPrice", Value.fromBigDecimal(value));
  }

  get ohmTotalSupply(): BigDecimal {
    const value = this.get("ohmTotalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set ohmTotalSupply(value: BigDecimal) {
    this.set("ohmTotalSupply", Value.fromBigDecimal(value));
  }

  get sOhmCirculatingSupply(): BigDecimal {
    const value = this.get("sOhmCirculatingSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set sOhmCirculatingSupply(value: BigDecimal) {
    this.set("sOhmCirculatingSupply", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalValueLocked(): BigDecimal {
    const value = this.get("totalValueLocked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLocked(value: BigDecimal) {
    this.set("totalValueLocked", Value.fromBigDecimal(value));
  }

  get treasuryLiquidBacking(): BigDecimal | null {
    const value = this.get("treasuryLiquidBacking");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryLiquidBacking(value: BigDecimal | null) {
    if (!value) {
      this.unset("treasuryLiquidBacking");
    } else {
      this.set(
        "treasuryLiquidBacking",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get treasuryLiquidBackingPerGOhmSynthetic(): BigDecimal | null {
    const value = this.get("treasuryLiquidBackingPerGOhmSynthetic");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryLiquidBackingPerGOhmSynthetic(value: BigDecimal | null) {
    if (!value) {
      this.unset("treasuryLiquidBackingPerGOhmSynthetic");
    } else {
      this.set(
        "treasuryLiquidBackingPerGOhmSynthetic",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get treasuryLiquidBackingPerOhmFloating(): BigDecimal | null {
    const value = this.get("treasuryLiquidBackingPerOhmFloating");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryLiquidBackingPerOhmFloating(value: BigDecimal | null) {
    if (!value) {
      this.unset("treasuryLiquidBackingPerOhmFloating");
    } else {
      this.set(
        "treasuryLiquidBackingPerOhmFloating",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get treasuryMarketValue(): BigDecimal | null {
    const value = this.get("treasuryMarketValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryMarketValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("treasuryMarketValue");
    } else {
      this.set("treasuryMarketValue", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class TokenRecord extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save TokenRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenRecord must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenRecord", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenRecord | null {
    return changetype<TokenRecord | null>(
      store.get_in_block("TokenRecord", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenRecord | null {
    return changetype<TokenRecord | null>(
      store.get("TokenRecord", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get token(): string {
    const value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAddress(): string {
    const value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get source(): string {
    const value = this.get("source");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get sourceAddress(): string {
    const value = this.get("sourceAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sourceAddress(value: string) {
    this.set("sourceAddress", Value.fromString(value));
  }

  get rate(): BigDecimal {
    const value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rate(value: BigDecimal) {
    this.set("rate", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    const value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get multiplier(): BigDecimal {
    const value = this.get("multiplier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set multiplier(value: BigDecimal) {
    this.set("multiplier", Value.fromBigDecimal(value));
  }

  get value(): BigDecimal {
    const value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get valueExcludingOhm(): BigDecimal {
    const value = this.get("valueExcludingOhm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set valueExcludingOhm(value: BigDecimal) {
    this.set("valueExcludingOhm", Value.fromBigDecimal(value));
  }

  get category(): string {
    const value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get isLiquid(): boolean {
    const value = this.get("isLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isLiquid(value: boolean) {
    this.set("isLiquid", Value.fromBoolean(value));
  }

  get isBluechip(): boolean {
    const value = this.get("isBluechip");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isBluechip(value: boolean) {
    this.set("isBluechip", Value.fromBoolean(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }
}

export class TokenSupply extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save TokenSupply entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenSupply must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenSupply", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenSupply | null {
    return changetype<TokenSupply | null>(
      store.get_in_block("TokenSupply", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenSupply | null {
    return changetype<TokenSupply | null>(
      store.get("TokenSupply", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get token(): string {
    const value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenAddress(): string {
    const value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get pool(): string | null {
    const value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }

  get poolAddress(): string | null {
    const value = this.get("poolAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (!value) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(<string>value));
    }
  }

  get source(): string | null {
    const value = this.get("source");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set source(value: string | null) {
    if (!value) {
      this.unset("source");
    } else {
      this.set("source", Value.fromString(<string>value));
    }
  }

  get sourceAddress(): string | null {
    const value = this.get("sourceAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sourceAddress(value: string | null) {
    if (!value) {
      this.unset("sourceAddress");
    } else {
      this.set("sourceAddress", Value.fromString(<string>value));
    }
  }

  get type(): string {
    const value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get balance(): BigDecimal {
    const value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get supplyBalance(): BigDecimal {
    const value = this.get("supplyBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set supplyBalance(value: BigDecimal) {
    this.set("supplyBalance", Value.fromBigDecimal(value));
  }
}

export class PriceSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PriceSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceSnapshot | null {
    return changetype<PriceSnapshot | null>(
      store.get_in_block("PriceSnapshot", id),
    );
  }

  static load(id: string): PriceSnapshot | null {
    return changetype<PriceSnapshot | null>(store.get("PriceSnapshot", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get priceOhm(): BigDecimal {
    const value = this.get("priceOhm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceOhm(value: BigDecimal) {
    this.set("priceOhm", Value.fromBigDecimal(value));
  }

  get priceGOhm(): BigDecimal {
    const value = this.get("priceGOhm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceGOhm(value: BigDecimal) {
    this.set("priceGOhm", Value.fromBigDecimal(value));
  }
}

export class GnosisAuctionRoot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save GnosisAuctionRoot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GnosisAuctionRoot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GnosisAuctionRoot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GnosisAuctionRoot | null {
    return changetype<GnosisAuctionRoot | null>(
      store.get_in_block("GnosisAuctionRoot", id),
    );
  }

  static load(id: string): GnosisAuctionRoot | null {
    return changetype<GnosisAuctionRoot | null>(
      store.get("GnosisAuctionRoot", id),
    );
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get markets(): Array<BigInt> {
    const value = this.get("markets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set markets(value: Array<BigInt>) {
    this.set("markets", Value.fromBigIntArray(value));
  }
}

export class GnosisAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save GnosisAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GnosisAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GnosisAuction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GnosisAuction | null {
    return changetype<GnosisAuction | null>(
      store.get_in_block("GnosisAuction", id),
    );
  }

  static load(id: string): GnosisAuction | null {
    return changetype<GnosisAuction | null>(store.get("GnosisAuction", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auctionOpenTimestamp(): BigInt {
    const value = this.get("auctionOpenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auctionOpenTimestamp(value: BigInt) {
    this.set("auctionOpenTimestamp", Value.fromBigInt(value));
  }

  get payoutCapacity(): BigDecimal {
    const value = this.get("payoutCapacity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set payoutCapacity(value: BigDecimal) {
    this.set("payoutCapacity", Value.fromBigDecimal(value));
  }

  get termSeconds(): BigInt {
    const value = this.get("termSeconds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termSeconds(value: BigInt) {
    this.set("termSeconds", Value.fromBigInt(value));
  }

  get bidQuantity(): BigDecimal | null {
    const value = this.get("bidQuantity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set bidQuantity(value: BigDecimal | null) {
    if (!value) {
      this.unset("bidQuantity");
    } else {
      this.set("bidQuantity", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get auctionCloseTimestamp(): BigInt | null {
    const value = this.get("auctionCloseTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set auctionCloseTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("auctionCloseTimestamp");
    } else {
      this.set("auctionCloseTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC20TokenSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save ERC20TokenSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC20TokenSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ERC20TokenSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ERC20TokenSnapshot | null {
    return changetype<ERC20TokenSnapshot | null>(
      store.get_in_block("ERC20TokenSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): ERC20TokenSnapshot | null {
    return changetype<ERC20TokenSnapshot | null>(
      store.get("ERC20TokenSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    const value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get decimals(): i32 {
    const value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigDecimal | null {
    const value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupply(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class BalancerPoolSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save BalancerPoolSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BalancerPoolSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BalancerPoolSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BalancerPoolSnapshot | null {
    return changetype<BalancerPoolSnapshot | null>(
      store.get_in_block("BalancerPoolSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): BalancerPoolSnapshot | null {
    return changetype<BalancerPoolSnapshot | null>(
      store.get("BalancerPoolSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get pool(): Bytes {
    const value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get poolToken(): Bytes {
    const value = this.get("poolToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set poolToken(value: Bytes) {
    this.set("poolToken", Value.fromBytes(value));
  }

  get decimals(): i32 {
    const value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigDecimal {
    const value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get tokens(): Array<Bytes> {
    const value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get balances(): Array<BigDecimal> {
    const value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set balances(value: Array<BigDecimal>) {
    this.set("balances", Value.fromBigDecimalArray(value));
  }

  get weights(): Array<BigDecimal> {
    const value = this.get("weights");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set weights(value: Array<BigDecimal>) {
    this.set("weights", Value.fromBigDecimalArray(value));
  }
}

export class PoolSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PoolSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PoolSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PoolSnapshot | null {
    return changetype<PoolSnapshot | null>(
      store.get_in_block("PoolSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): PoolSnapshot | null {
    return changetype<PoolSnapshot | null>(
      store.get("PoolSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get pool(): Bytes {
    const value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get poolToken(): Bytes | null {
    const value = this.get("poolToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set poolToken(value: Bytes | null) {
    if (!value) {
      this.unset("poolToken");
    } else {
      this.set("poolToken", Value.fromBytes(<Bytes>value));
    }
  }

  get decimals(): i32 {
    const value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigDecimal {
    const value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get tokens(): Array<Bytes> {
    const value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get balances(): Array<BigDecimal> {
    const value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set balances(value: Array<BigDecimal>) {
    this.set("balances", Value.fromBigDecimalArray(value));
  }

  get weights(): Array<BigDecimal> | null {
    const value = this.get("weights");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set weights(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("weights");
    } else {
      this.set("weights", Value.fromBigDecimalArray(<Array<BigDecimal>>value));
    }
  }
}

export class TokenPriceSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save TokenPriceSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenPriceSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenPriceSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenPriceSnapshot | null {
    return changetype<TokenPriceSnapshot | null>(
      store.get_in_block("TokenPriceSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): TokenPriceSnapshot | null {
    return changetype<TokenPriceSnapshot | null>(
      store.get("TokenPriceSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get token(): Bytes {
    const value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get price(): BigDecimal {
    const value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }
}

export class StakingPoolSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save StakingPoolSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type StakingPoolSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StakingPoolSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): StakingPoolSnapshot | null {
    return changetype<StakingPoolSnapshot | null>(
      store.get_in_block("StakingPoolSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): StakingPoolSnapshot | null {
    return changetype<StakingPoolSnapshot | null>(
      store.get("StakingPoolSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    const value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get stakingToken(): Bytes | null {
    const value = this.get("stakingToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set stakingToken(value: Bytes | null) {
    if (!value) {
      this.unset("stakingToken");
    } else {
      this.set("stakingToken", Value.fromBytes(<Bytes>value));
    }
  }
}
