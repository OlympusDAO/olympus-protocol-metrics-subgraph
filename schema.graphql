# Stores easily-calculated metrics related to the Olympus protocol
type ProtocolMetric @entity(immutable: true) {
  id: Bytes! # YYYY-MM-DD/<block>
  block: BigInt!
  currentAPY: BigDecimal!
  currentIndex: BigDecimal!
  date: String! # YYYY-MM-DD
  gOhmPrice: BigDecimal!
  gOhmSyntheticSupply: BigDecimal
  gOhmTotalSupply: BigDecimal!
  marketCap: BigDecimal
  nextDistributedOhm: BigDecimal!
  nextEpochRebase: BigDecimal!
  ohmCirculatingSupply: BigDecimal
  ohmFloatingSupply: BigDecimal
  ohmPrice: BigDecimal!
  ohmTotalSupply: BigDecimal!
  sOhmCirculatingSupply: BigDecimal! # Returned by the sOHM contract, so can be included here
  timestamp: BigInt! # Unix timestamp in UTC
  totalValueLocked: BigDecimal!
  treasuryLiquidBacking: BigDecimal
  treasuryLiquidBackingPerGOhmSynthetic: BigDecimal
  treasuryLiquidBackingPerOhmFloating: BigDecimal
  treasuryMarketValue: BigDecimal
}

# Represents the balance of a specific token in the treasury
type TokenRecord @entity(immutable: true) {
  id: Bytes! # YYYY-MM-DD/<block>/<source>/<token>
  block: BigInt!
  timestamp: BigInt! # Unix timestamp in UTC
  date: String!
  token: String!
  tokenAddress: String!
  source: String!
  sourceAddress: String!
  rate: BigDecimal!
  balance: BigDecimal!
  multiplier: BigDecimal!
  value: BigDecimal! # Calculated
  valueExcludingOhm: BigDecimal! # Calculated
  category: String!
  isLiquid: Boolean!
  isBluechip: Boolean!
  blockchain: String!
}

# Represents a balance that affects the supply of OHM
type TokenSupply @entity(immutable: true) {
  id: Bytes! # YYYY-MM-DD/<block>/<token>/<type>/<pool>/<source>
  block: BigInt!
  timestamp: BigInt! # Unix timestamp in UTC
  date: String! # YYYY-MM-DD
  token: String!
  tokenAddress: String!
  pool: String
  poolAddress: String
  source: String # e.g. a wallet
  sourceAddress: String
  type: String! # e.g. total supply
  balance: BigDecimal!
  supplyBalance: BigDecimal! # may be negative to represent the token being taken out of circulation
}

type PriceSnapshot @entity(immutable: true) {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  date: String!
  priceOhm: BigDecimal!
  priceGOhm: BigDecimal!
}

# Should be a single entry
# Used for tracking markets
type GnosisAuctionRoot @entity {
  id: ID!
  markets: [BigInt!]!
}

type GnosisAuction @entity {
  id: ID!
  auctionOpenTimestamp: BigInt!
  payoutCapacity: BigDecimal!
  termSeconds: BigInt!
  bidQuantity: BigDecimal # Is set later, so should not be required
  auctionCloseTimestamp: BigInt
}

# Caching
type ERC20TokenSnapshot @entity(immutable: true) {
  id: Bytes! # address/block
  address: Bytes!
  decimals: Int!
  totalSupply: BigDecimal
}

# TODO migrate to PoolSnapshot
type BalancerPoolSnapshot @entity(immutable: true) {
  id: Bytes! # pool id/block
  block: BigInt!
  pool: Bytes!
  poolToken: Bytes!
  decimals: Int!
  totalSupply: BigDecimal!
  tokens: [Bytes!]!
  balances: [BigDecimal!]!
  weights: [BigDecimal!]!
}

type PoolSnapshot @entity(immutable: true) {
  id: Bytes! # pool/block
  block: BigInt!
  pool: Bytes!
  poolToken: Bytes
  decimals: Int!
  totalSupply: BigDecimal!
  tokens: [Bytes!]!
  balances: [BigDecimal!]!
  weights: [BigDecimal!]
}

type TokenPriceSnapshot @entity(immutable: true) {
  id: Bytes! # address/block
  block: BigInt!
  token: Bytes!
  price: BigDecimal!
}

type StakingPoolSnapshot @entity(immutable: true) {
  id: Bytes! # address/block
  block: BigInt!
  contractAddress: Bytes!
  stakingToken: Bytes # Will not be set if the call reverts
}

type BophadesModule @entity(immutable: true) {
  id: Bytes! # module/block
  block: BigInt!
  keycode: String!
  moduleAddress: Bytes!
}

type ClearinghouseAddress @entity(immutable: true) {
  id: Bytes! # moduleAddress/block
  block: BigInt!
  addresses: [Bytes!]!
}
